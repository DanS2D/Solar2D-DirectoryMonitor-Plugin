{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"directoryMonitor.* Type Plugin Platforms Windows, Mac (coming soon!) Overview A directory monitor plugin for Solar2D. Features: watch specific directories and be notified on move, delete, create and modify events. un-watch directories that you have previously set to watch. The events described above happen on post. Syntax local directoryMonitor = require(\"plugin.directoryMonitor\") Functions directoryMonitor.watch() directoryMonitor.unwatch() Runtime:addEventListener() Project Settings To use this plugin, add an entry into the plugins table of build.settings . When added, the Solar2D build system will integrate the plugin during the build phase. settings = { plugins = { [ plugin.directoryMonitor ] = { publisherId = com.revolt64 , supportedPlatforms = { [ win32-sim ] = {url = https://github.com/DannyGlover/Solar2D-DirectoryMonitor-Plugin/raw/master/dist/v1/win32-sim/data.tgz }, [ macos ] = {url = https://github.com/DannyGlover/Solar2D-DirectoryMonitor-Plugin/raw/master/dist/v1/macos/data.tgz } } }, }, } How can I support you? I have a Patreon where you can support me. Any amount is appreciated. Thanks for your support!. Have any other plugins or interesting projects ? Yes! You can find my other projects at my Github page Technical Support / Issues GitHub","title":"Home"},{"location":"#directorymonitor","text":"Type Plugin Platforms Windows, Mac (coming soon!)","title":"directoryMonitor.*"},{"location":"#overview","text":"A directory monitor plugin for Solar2D. Features: watch specific directories and be notified on move, delete, create and modify events. un-watch directories that you have previously set to watch. The events described above happen on post.","title":"Overview"},{"location":"#syntax","text":"local directoryMonitor = require(\"plugin.directoryMonitor\")","title":"Syntax"},{"location":"#functions","text":"","title":"Functions"},{"location":"#directorymonitorwatch","text":"","title":"directoryMonitor.watch()"},{"location":"#directorymonitorunwatch","text":"","title":"directoryMonitor.unwatch()"},{"location":"#runtimeaddeventlistener","text":"","title":"Runtime:addEventListener()"},{"location":"#project-settings","text":"To use this plugin, add an entry into the plugins table of build.settings . When added, the Solar2D build system will integrate the plugin during the build phase. settings = { plugins = { [ plugin.directoryMonitor ] = { publisherId = com.revolt64 , supportedPlatforms = { [ win32-sim ] = {url = https://github.com/DannyGlover/Solar2D-DirectoryMonitor-Plugin/raw/master/dist/v1/win32-sim/data.tgz }, [ macos ] = {url = https://github.com/DannyGlover/Solar2D-DirectoryMonitor-Plugin/raw/master/dist/v1/macos/data.tgz } } }, }, }","title":"Project Settings"},{"location":"#how-can-i-support-you","text":"I have a Patreon where you can support me. Any amount is appreciated. Thanks for your support!.","title":"How can I support you?"},{"location":"#have-any-other-plugins-or-interesting-projects","text":"Yes! You can find my other projects at my Github page","title":"Have any other plugins or interesting projects ?"},{"location":"#technical-support-issues","text":"GitHub","title":"Technical Support / Issues"},{"location":"runtimeEvent/","text":"Runtime:addEventListener() Type Listener Return value None See also directoryMonitor.watch() directoryMonitor.unwatch() Overview Recieves directory monitor events. Syntax Runtime:addEventListener(\"directoryMonitor\", listener) listener (required) Function . The function to recieve directory monitor events. Event key/value pairs name String . The string directoryMonitor . watchID Number . The watch ID that this event originated from. action String . The action that was performed on the file. Possible responses are: create , delete , modify and move . rootDirectory String . The root directory of the file the action was performed on. This is always the same directory you passed to directoryMonitor.watch() . filePath String . The full path to the file that the action was performed on. Example local directoryMonitor = require( plugin.directoryMonitor ) local function directoryListener(event) for k, v in pairs(event) do print(k, v) end end Runtime:addEventListener( directoryMonitor , directoryListener) local watchID = directoryMonitor.watch( C:\\\\ )","title":"Runtime:addEventListener()"},{"location":"runtimeEvent/#runtimeaddeventlistener","text":"Type Listener Return value None See also directoryMonitor.watch() directoryMonitor.unwatch()","title":"Runtime:addEventListener()"},{"location":"runtimeEvent/#overview","text":"Recieves directory monitor events.","title":"Overview"},{"location":"runtimeEvent/#syntax","text":"Runtime:addEventListener(\"directoryMonitor\", listener) listener (required) Function . The function to recieve directory monitor events.","title":"Syntax"},{"location":"runtimeEvent/#event-keyvalue-pairs","text":"name String . The string directoryMonitor . watchID Number . The watch ID that this event originated from. action String . The action that was performed on the file. Possible responses are: create , delete , modify and move . rootDirectory String . The root directory of the file the action was performed on. This is always the same directory you passed to directoryMonitor.watch() . filePath String . The full path to the file that the action was performed on.","title":"Event key/value pairs"},{"location":"runtimeEvent/#example","text":"local directoryMonitor = require( plugin.directoryMonitor ) local function directoryListener(event) for k, v in pairs(event) do print(k, v) end end Runtime:addEventListener( directoryMonitor , directoryListener) local watchID = directoryMonitor.watch( C:\\\\ )","title":"Example"},{"location":"unwatch/","text":"directoryMonitor.unwatch() Type Function Return value None See also directoryMonitor.watch() Overview Stops monitoring/watching a previously watched directory. Function arguments: Syntax directoryMonitor.unwatch(watchID) watchID (required) Number . The directory watch id, as retrieved from directoryMonitor.watch() . Example local directoryMonitor = require( plugin.directoryMonitor ) local watchID = directoryMonitor.watch( C:\\\\ )","title":"directoryMonitor.unwatch()"},{"location":"unwatch/#directorymonitorunwatch","text":"Type Function Return value None See also directoryMonitor.watch()","title":"directoryMonitor.unwatch()"},{"location":"unwatch/#overview","text":"Stops monitoring/watching a previously watched directory. Function arguments:","title":"Overview"},{"location":"unwatch/#syntax","text":"directoryMonitor.unwatch(watchID) watchID (required) Number . The directory watch id, as retrieved from directoryMonitor.watch() .","title":"Syntax"},{"location":"unwatch/#example","text":"local directoryMonitor = require( plugin.directoryMonitor ) local watchID = directoryMonitor.watch( C:\\\\ )","title":"Example"},{"location":"watch/","text":"directoryMonitor.watch() Type Function Return value Number See also directoryMonitor.unwatch() Overview Specifies a directory to monitor/watch. You will receive events when any of the following occurs in the watched directory: File added. File removed. File modified. File moved. Syntax directoryMonitor.watch(directoryPath) directoryPath (required) String . The directory path to monitor e.g. C:\\\\ . Example local directoryMonitor = require( plugin.directoryMonitor ) local watchID = directoryMonitor.watch( C:\\\\ ) You can listen for file events via a Runtime listener","title":"directoryMonitor.watch()"},{"location":"watch/#directorymonitorwatch","text":"Type Function Return value Number See also directoryMonitor.unwatch()","title":"directoryMonitor.watch()"},{"location":"watch/#overview","text":"Specifies a directory to monitor/watch. You will receive events when any of the following occurs in the watched directory: File added. File removed. File modified. File moved.","title":"Overview"},{"location":"watch/#syntax","text":"directoryMonitor.watch(directoryPath) directoryPath (required) String . The directory path to monitor e.g. C:\\\\ .","title":"Syntax"},{"location":"watch/#example","text":"local directoryMonitor = require( plugin.directoryMonitor ) local watchID = directoryMonitor.watch( C:\\\\ ) You can listen for file events via a Runtime listener","title":"Example"}]}